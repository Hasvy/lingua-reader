@page "/ResetPassword"
@attribute [AllowAnonymous]

@using Microsoft.AspNetCore.Components.Forms
@using Objects.Dto;
@using Services.Authentication;
@using Microsoft.AspNetCore.WebUtilities

<RadzenStack Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 520px; overflow: hidden;">
    <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-background-color-primary rz-p-12" style="text-align: center;">
        <RadzenText TextStyle="TextStyle.DisplayH4" TagName="TagName.H2" Class="rz-color-white rz-m-0">Reset Password</RadzenText>
    </RadzenCard>
    <RadzenCard Class="rz-shadow-0 rz-p-8">
        <RadzenTemplateForm Context="templateContext" TItem="ResetPasswordDto" Data="_resetPasswordDto" Submit="Reset">
            <DataAnnotationsValidator />
            <RadzenStack Gap="1rem" class="rz-p-sm-8">
                <RadzenFormField Text="Password" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox Name="Password" @bind-Value="_resetPasswordDto.Password" Visible="@_isPasswordVisible" />
                        <RadzenPassword Name="Password" @bind-Value=_resetPasswordDto.Password Visible="@(!_isPasswordVisible)" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(_isPasswordVisible ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                    <Helper>
                        <ValidationMessage For="@(() => _resetPasswordDto.Password)" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="ConfirmPassword" Variant="Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox Name="ConfirmPassword" @bind-Value="_resetPasswordDto.ConfirmPassword" Visible="@_isConfirmPasswordVisible" />
                        <RadzenPassword Name="ConfirmPassword" @bind-Value=_resetPasswordDto.ConfirmPassword Visible="@(!_isConfirmPasswordVisible)" />
                    </ChildContent>
                    <Helper>
                        <ValidationMessage For="@(() => _resetPasswordDto.ConfirmPassword)" />
                    </Helper>
                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenCard>
</RadzenStack>


@code {
    private ResetPasswordDto _resetPasswordDto = new ResetPasswordDto();
    [Inject] public IAuthenticationService AuthenticationService { get; set; } = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    private bool _isPasswordVisible = false;
    private bool _isConfirmPasswordVisible = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);

        if (queryParameters.TryGetValue("token", out var token))
        {
            _resetPasswordDto.Token = token!;
        }
        if (queryParameters.TryGetValue("email", out var email))
        {
            _resetPasswordDto.Email = email!;
        }
        base.OnInitialized();
    }

    public async Task Reset()
    {
        await AuthenticationService.ResetPassword(_resetPasswordDto);
    }

    void TogglePassword()
    {
        _isPasswordVisible = !_isPasswordVisible;
        _isConfirmPasswordVisible = !_isConfirmPasswordVisible;
    }
}
